---
export interface Props {
  service?: 'plumbing' | 'electrical';
}

const { service } = Astro.props;
---

<div class="md:hidden">
  <!-- Mobile Menu Button -->
  <button
    id="mobile-menu-button"
    type="button"
    class="p-2 text-stone-600 hover:text-stone-800 touch-manipulation"
    aria-expanded="false"
    aria-controls="mobile-menu"
    aria-label="Toggle mobile menu"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
    </svg>
  </button>

  <!-- Mobile Menu Overlay -->
  <div
    id="mobile-menu-overlay"
    class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 opacity-0 invisible transition-all duration-300"
    aria-hidden="true"
  ></div>

  <!-- Mobile Menu Panel -->
  <div
    id="mobile-menu"
    class="fixed top-0 right-0 h-full w-80 max-w-[85vw] bg-white shadow-2xl z-50 transform translate-x-full transition-transform duration-300"
    role="dialog"
    aria-modal="true"
    aria-labelledby="mobile-menu-title"
  >
    <!-- Menu Header -->
    <div class="flex items-center justify-between p-4 border-b border-stone-200">
      <h2 id="mobile-menu-title" class="text-lg font-semibold text-stone-800">Menu</h2>
      <button
        id="mobile-menu-close"
        type="button"
        class="p-2 text-stone-600 hover:text-stone-800 touch-manipulation"
        aria-label="Close mobile menu"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </button>
    </div>

    <!-- Menu Content -->
    <nav class="flex-1 p-4 space-y-2">
      <!-- Emergency CTA -->
      <a
        href="/emergency"
        class="flex items-center gap-3 bg-red-600 hover:bg-red-700 text-white p-4 rounded-xl font-bold transition-colors duration-200 touch-manipulation shadow-sm"
      >
        <span class="w-3 h-3 bg-white rounded-full animate-pulse"></span>
        <div>
          <div class="text-sm">Emergency Help</div>
          <div class="text-xs opacity-90">Available 24/7</div>
        </div>
      </a>

      <!-- Services -->
      <div class="space-y-1">
        <a
          href="/plumbing"
          class={`flex items-center gap-3 p-3 rounded-lg transition-colors duration-200 touch-manipulation ${service === 'plumbing' ? 'bg-blue-50 text-blue-800 border border-blue-200' : 'text-stone-700 hover:bg-blue-50 hover:text-blue-700'}`}
        >
          <div class="w-3 h-3 bg-blue-600 rounded-full"></div>
          <span class="font-medium">Plumbing Services</span>
        </a>

        <a
          href="/electrical"
          class={`flex items-center gap-3 p-3 rounded-lg transition-colors duration-200 touch-manipulation ${service === 'electrical' ? 'bg-orange-50 text-orange-800 border border-orange-200' : 'text-stone-700 hover:bg-orange-50 hover:text-orange-600'}`}
        >
          <div class="w-3 h-3 bg-orange-500 rounded-full"></div>
          <span class="font-medium">Electrical Services</span>
        </a>
      </div>

      <!-- Contact -->
      <a
        href="/contact"
        class="block p-3 text-stone-700 hover:bg-stone-50 rounded-lg transition-colors duration-200 touch-manipulation font-medium"
      >
        Contact Us
      </a>

      <!-- Direct Call Link -->
      <div class="pt-4 border-t border-stone-200 mt-4">
        <a
          href="tel:+16722384660"
          class="flex items-center justify-center gap-2 bg-blue-600 hover:bg-blue-700 text-white p-4 rounded-xl font-semibold transition-colors duration-200 touch-manipulation"
        >
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"/>
          </svg>
          <span>(672) 238-4660</span>
        </a>
      </div>
    </nav>
  </div>
</div>

<script>
  // Mobile menu functionality with focus trap and accessibility
  document.addEventListener('DOMContentLoaded', () => {
    const menuButton = document.getElementById('mobile-menu-button');
    const menuOverlay = document.getElementById('mobile-menu-overlay');
    const menuPanel = document.getElementById('mobile-menu');
    const closeButton = document.getElementById('mobile-menu-close');

    if (!menuButton || !menuOverlay || !menuPanel || !closeButton) return;

    let isOpen = false;
    let previouslyFocusedElement: HTMLElement | null = null;

    // Focusable elements for focus trap
    const focusableSelectors = 'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])';

    function getFocusableElements(): HTMLElement[] {
      return Array.from(menuPanel.querySelectorAll(focusableSelectors));
    }

    function openMenu() {
      if (isOpen) return;

      isOpen = true;
      previouslyFocusedElement = document.activeElement as HTMLElement;

      // Show overlay and menu
      menuOverlay.classList.remove('opacity-0', 'invisible');
      menuOverlay.classList.add('opacity-100', 'visible');
      menuPanel.classList.remove('translate-x-full');
      menuPanel.classList.add('translate-x-0');

      // Update ARIA states
      menuButton.setAttribute('aria-expanded', 'true');
      menuOverlay.setAttribute('aria-hidden', 'false');

      // Prevent body scroll
      document.body.style.overflow = 'hidden';

      // Focus the close button
      setTimeout(() => closeButton.focus(), 100);
    }

    function closeMenu() {
      if (!isOpen) return;

      isOpen = false;

      // Hide overlay and menu
      menuOverlay.classList.remove('opacity-100', 'visible');
      menuOverlay.classList.add('opacity-0', 'invisible');
      menuPanel.classList.remove('translate-x-0');
      menuPanel.classList.add('translate-x-full');

      // Update ARIA states
      menuButton.setAttribute('aria-expanded', 'false');
      menuOverlay.setAttribute('aria-hidden', 'true');

      // Restore body scroll
      document.body.style.overflow = '';

      // Return focus
      if (previouslyFocusedElement) {
        previouslyFocusedElement.focus();
        previouslyFocusedElement = null;
      }
    }

    // Event listeners
    menuButton.addEventListener('click', openMenu);
    closeButton.addEventListener('click', closeMenu);
    menuOverlay.addEventListener('click', closeMenu);

    // Handle escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && isOpen) {
        closeMenu();
      }
    });

    // Focus trap
    menuPanel.addEventListener('keydown', (e) => {
      if (e.key === 'Tab' && isOpen) {
        const focusableElements = getFocusableElements();
        const firstElement = focusableElements[0];
        const lastElement = focusableElements[focusableElements.length - 1];

        if (e.shiftKey) {
          // Shift + Tab
          if (document.activeElement === firstElement) {
            e.preventDefault();
            lastElement?.focus();
          }
        } else {
          // Tab
          if (document.activeElement === lastElement) {
            e.preventDefault();
            firstElement?.focus();
          }
        }
      }
    });

    // Close menu when clicking on navigation links
    const navLinks = menuPanel.querySelectorAll('a[href]');
    navLinks.forEach(link => {
      link.addEventListener('click', () => {
        // Small delay to allow navigation to start
        setTimeout(closeMenu, 100);
      });
    });
  });
</script>